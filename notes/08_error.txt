"Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as 
cleverly as possible, you are, by definition, not smart enough to debug it."

-Brian Kernighan and P.J. Plauger, The Elements of Programming Style

essentailly two kinds of bugs
-those caused by ideas being confused
-those caused while ideas were converted to code

best to enable strict mode
	"user strict";
	
Note: outside of strict mode, when you declare a variable without any prefix, Javascript will quietly create a global binding 

strict mode also does
	disallow giving a function multiple parameters with the same name
	removes with statements (which is so wrong it is not further discussed in this book - Marijin Haverbeke
	
Great tip
	instead of making overly long binding names
	let rawtuplelistjoindictwhateverfuckshitcunt
	
	just use comments
	# this is the thing that you get from the sql select whatever convert to dictionary
	categories_dict
	
TypeScript is a JS dialect

Testing
	testing manually is a bad idea
	
	automated testing is worth it

wtf in html the select element has a multiple attribute for multiple selection of multiple otpions

chrome > dev tools > sources
    can place breakpoints here

not all problems can be prevented by the programmer, is say your program communicates with the outside world

you can raise exceptions with throw keyword
    can also you an error constructor to create the exception value which may also gather information 
    about the call stack (the stack trace). this information is stored in the stack property. try e.stack

when doing exception handling. ensure that vital mistakes aren't being made such as.
    when doing a transfer of money from one account to another
        deducting money from one account
        an error occurs before the money can be added to another account
        
    ways to handle
        creating a new binding and only replacing the actual bindings at the end
        the 'finally' block

        function transfer(from, to, amount)
            if account[from] < amount return
            progress = 0;
                try {
                    deduct from account[from]
                    progress = 1
                    add to account[to]
                    progress = 2
                } finally {
                    if (progress != 2) {
                        accounts[from] += amount;
                    }
                }
            // basically this will track progress and if the progress never reach tyhe final stage it repairs the damage

            backend should always handle verification before updating the database

catching and recognizing a specific exceptions=
    class InputError extends Error {}
    // the new error class extends Error
    // doesn't define its own constructor, in fact doesn't define anything
    // behaves like Error object except that they have different class by which we can recognize them

    function promptDirection(question) {
        let result = prompt(question);
        if (result.toLowerCase() == "left") return "L";
        if (result.toLowerCase() == "right") return "R";
        throw new InputError("Invalid direction: " + result);
    }

    try {
        let dir = promptDirection("Where?");
        console.log("You chose ", dir);
        break;
    } catch (e) {
        if (e instanceof InputError) {
            console.log("Not a valid direction. Try again.");
        } else {
            throw e;
        }
    }

Javascript assertions
    just do condition checking that throws an error 
    to avoid making too much code noise, only use for common mistakes
    
    function firstElement(array) {
        if (array.length == 0) {
            throw new Error("firstElement called with []");
        }
        return array[0];
    }